// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid()) @db.Char(36)
  firstName    String
  lastName     String
  email        String           @unique
  password     String
  passwordSalt String
  role         UserRole         @default(client)
  checkout     Checkout[]
  address      UserAddress[]
  creditCard   UserCreditCard[]
  orders       Order[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([email])
}

enum UserRole {
  client
  admin
}

model UserCreditCard {
  id             String   @id @default(uuid()) @db.Char(36)
  userId         String   @db.Char(36)
  user           User     @relation(fields: [userId], references: [id])
  cardNumber     String   @db.VarChar(255)
  cardHolderName String   @db.VarChar(255)
  expiryDate     String
  cvv            Int
  orders         Order[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([cardHolderName, userId])
}

model UserAddress {
  id           String   @id @default(uuid()) @db.Char(36)
  name         String   @default("Mon adresse")
  firstName    String
  lastName     String
  phone        String
  streetNumber String?
  street       String
  additional   String?
  zipCode      String
  city         String
  country      String
  userId       String   @db.Char(36)
  user         User     @relation(fields: [userId], references: [id])
  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model UserResetPassword {
  id    String @id @default(uuid()) @db.Char(36)
  email String @unique
  token String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, token])
}

model Product {
  id           String          @id @default(uuid()) @db.Char(36)
  name         String
  description  String
  slug         String          @unique
  images       String[]
  price        Float
  quantity     Int             @default(0)
  categoryId   String          @db.Char(36)
  category     ProductCategory @relation(fields: [categoryId], references: [id])
  checkoutItem CheckoutItem[]
  productTypes ProductType[]
  orderItems   OrderItem[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([price, quantity, name, description])
}

model ProductCategory {
  id          String    @id @default(uuid()) @db.Char(36)
  name        String
  description String
  slug        String
  image       String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductType {
  id        String    @id @default(uuid()) @db.Char(36)
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([name])
}

model Checkout {
  id              String            @id @default(uuid()) @db.Char(36)
  status          CheckoutStatus
  userId          String            @db.Char(36)
  user            User              @relation(fields: [userId], references: [id])
  checkoutItem    CheckoutItem[]
  checkoutAddress CheckoutAddress[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
}

model CheckoutAddress {
  id           String   @id @default(uuid()) @db.Char(36)
  firstName    String
  lastName     String
  phone        String
  streetNumber String
  street       String
  additional   String?
  zipCode      String
  city         String
  country      String
  checkoutId   String   @db.Char(36)
  checkout     Checkout @relation(fields: [checkoutId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([checkoutId])
}

enum CheckoutStatus {
  waiting
  process
  paymentSuccess
  delivered
}

model CheckoutItem {
  id        String   @id @default(uuid()) @db.Char(36)
  quantity  Int
  productId String   @db.Char(36)
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String   @db.Char(36)
  checkout  Checkout @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           String         @id @default(uuid()) @db.Char(36)
  userId       String         @db.Char(36)
  user         User           @relation(fields: [userId], references: [id])
  addressId    String         @db.Char(36)
  address      UserAddress    @relation(fields: [addressId], references: [id])
  creditCardId String         @db.Char(36)
  creditCard   UserCreditCard @relation(fields: [creditCardId], references: [id])
  orderItems   OrderItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model OrderItem {
  id          String   @id @default(uuid()) @db.Char(36)
  quantity    Int
  productSlug String   @db.Char(36)
  product     Product  @relation(fields: [productSlug], references: [slug])
  orderId     String   @db.Char(36)
  order       Order    @relation(fields: [orderId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productSlug, orderId])
}

model Contact {
  id        String   @id @default(uuid()) @db.Char(36)
  title     String
  message   String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([email])
}
